""
在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i]升。

你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i]升。你从其中的一个加油站出发，开始时油箱为空。

如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。

说明: 

如果题目有解，该答案即为唯一答案。
输入数组均为非空数组，且长度相同。
输入数组中的元素均为非负数。
示例 1:

输入: 
gas  = [1,2,3,4,5]
cost = [3,4,5,1,2]

输出: 3

解释:
从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
因此，3 可为起始索引。
""
class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        '先判断总油量是否充足'
        "从0 号加油站出发，设置初始油量为0"
        "遍历后续加油站，，每次更新油箱的油量，判断能否到达下一站"
        '如果不能到达下一站，将下一站设置为起点，重置油量为0'
        '直到找到能回到0号加油站的起始点'
        
        #整个过程只执行了一次遍历，时间复杂度为O(n)
        if sum(gas)<sum(cost):
            return -1
        cur_gas=0
        start_station=0
        station=len(gas)
        for i in range(station):
            cur_gas+=gas[i]-cost[i]
            if cur_gas<0:
                i=i+1
                cur_gas=0
                start_station=i
            
        return start_station
